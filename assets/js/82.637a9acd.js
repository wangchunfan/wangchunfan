(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{406:function(v,e,_){"use strict";_.r(e);var i=_(0),t=Object(i.a)({},(function(){var v=this,e=v.$createElement,_=v._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[_("a",{attrs:{href:"https://github.com/wangchunfan/DesignPatterns",target:"_blank",rel:"noopener noreferrer"}},[v._v("GitHub源码"),_("OutboundLink")],1)]),v._v(" "),_("p",[v._v("源码包分类")]),v._v(" "),_("ul",[_("li",[v._v("headfirst：《headfirst 设计模式》代码")]),v._v(" "),_("li",[v._v("dahua：《大话设计模式》代码")]),v._v(" "),_("li",[v._v("wang.chunfan：其它网上来源")])]),v._v(" "),_("blockquote",[_("p",[v._v("模式：在某情境下，针对某问题的某种解决方案。")])]),v._v(" "),_("h1",{attrs:{id:"设计模式分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#设计模式分类"}},[v._v("#")]),v._v(" 设计模式分类")]),v._v(" "),_("ul",[_("li",[v._v("创建型：将对象实例化，这类模式都提供一个方法，将客户从所需要实力化的对象中解耦。\n"),_("ul",[_("li",[v._v("工厂方法模式（Factory Method）")]),v._v(" "),_("li",[v._v("抽象工厂模式（Abstract Factory）")]),v._v(" "),_("li",[v._v("建造者/生成器模式（Builder）")]),v._v(" "),_("li",[v._v("原型模式（Prototype）")]),v._v(" "),_("li",[v._v("单例模式(Singleton)")])])]),v._v(" "),_("li",[v._v("结构型：把类或对象组合到更大的结构中\n"),_("ul",[_("li",[v._v("适配器模式(Adapter)")]),v._v(" "),_("li",[v._v("桥接模式（Bridge）")]),v._v(" "),_("li",[v._v("组合模式（Composite）")]),v._v(" "),_("li",[v._v("装饰器模式（Decorator）")]),v._v(" "),_("li",[v._v("门面模式（Facade）")]),v._v(" "),_("li",[v._v("享元模式（Flyweight）")]),v._v(" "),_("li",[v._v("代理模式（Proxy）")])])]),v._v(" "),_("li",[v._v("行为型：涉及到类和对象如何交互及分配职责\n"),_("ul",[_("li",[v._v("解释器模式（Interpreter）")]),v._v(" "),_("li",[v._v("模板方法模式（Template Method）")]),v._v(" "),_("li",[v._v("责任链模式（Chain of Responsibility）")]),v._v(" "),_("li",[v._v("命令模式（Command）")]),v._v(" "),_("li",[v._v("迭代器模式（Iterator）")]),v._v(" "),_("li",[v._v("中介者/调解者模式（Mediator）")]),v._v(" "),_("li",[v._v("备忘录模式（Memento）")]),v._v(" "),_("li",[v._v("观察者模式（Observer）又称发布-订阅（Publish/Subscribe）模式")]),v._v(" "),_("li",[v._v("状态模式（State）")]),v._v(" "),_("li",[v._v("策略模式（Strategy）")]),v._v(" "),_("li",[v._v("访问者模式（Visitor）")])])])]),v._v(" "),_("p",[v._v("也可以根据模式所处理的类或者对象")]),v._v(" "),_("ul",[_("li",[v._v("类：描述类之间的关系如何通过继承定义。类模式的关系在编译时建立。")]),v._v(" "),_("li",[v._v("对象：描述对象之间的关系，主要是利用组合定义。对象模式的关系在运行时简历，更加动态、更有弹性。")])]),v._v(" "),_("p",[v._v("设计模式在应用中遵循六大原则：")]),v._v(" "),_("ol",[_("li",[v._v("开闭原则（Open Close Principle）：说对扩展开放，对修改关闭")]),v._v(" "),_("li",[v._v("里氏代换原则（Liskov Substitution Principle）：任何基类可以出现的地方，子类一定可以出现。")]),v._v(" "),_("li",[v._v("依赖倒转原则（Dependence Inversion Principle）：针对接口编程，依赖于抽象而不依赖于具体。参考《Head First 设计模式（中文版）》工厂方法。")]),v._v(" "),_("li",[v._v("接口隔离原则（Interface Segregation Principle）：使用多个隔离的接口，比使用单个接口要好")]),v._v(" "),_("li",[v._v("迪米特法则（最少知道原则）（Demeter Principle）：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能 模块相对独立。参考《Head First 设计模式（中文版）》外观模式。方法的调用范围尽可能小：\n"),_("ul",[_("li",[v._v("该对象本身")]),v._v(" "),_("li",[v._v("被当做方法的参数而传递进来的对象")]),v._v(" "),_("li",[v._v("此方法锁创建或实例化的任何对象")]),v._v(" "),_("li",[v._v("类的任何组件，类的一个属性（组件）是对象，可以调用这个对象的方法")]),v._v(" "),_("li",[v._v("不要调用从另一个对象调用返回的对象的方法\n"),_("img",{attrs:{src:"https://note.youdao.com/yws/public/resource/fb63e88819e0de2bc8a59f7f002e0843/xmlnote/D2E6A6F7FE19461086D864D1F6A9B876/13843",alt:"最少知道原则"}})])])]),v._v(" "),_("li",[v._v("合成复用原则（Composite Reuse Principle）：尽量使用合成/聚合的方式，而不是使用继承。也就是多用组合，少用继承。")])]),v._v(" "),_("h1",{attrs:{id:"参考"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[v._v("#")]),v._v(" 参考")]),v._v(" "),_("ol",[_("li",[v._v("《Head First 设计模式（中文版）》")]),v._v(" "),_("li",[_("a",{attrs:{href:"https://www.runoob.com/design-pattern/design-pattern-intro.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("设计模式|菜鸟教程"),_("OutboundLink")],1)]),v._v(" "),_("li",[v._v("《大话设计模式》")]),v._v(" "),_("li",[v._v("《深入浅出设计模式》")])])])}),[],!1,null,null,null);e.default=t.exports}}]);